apt update
apt install postgresql-17-pgvector


CREATE EXTENSION IF NOT EXISTS vector;


WITH reference AS (
  SELECT 
    embedding,
    embedding_habitaciones_banios_planta,
    precio AS ref_precio,
    m2 AS ref_m2,
    ubicacion AS ref_ubicacion,
    habitaciones as ref_habitaciones,
    banios as ref_banios,
    planta as ref_planta,
    ascensor as ref_ascensor
  FROM testigos 
  WHERE id = 16103
)
SELECT 
  t.id, 
  t.precio, 
  t.m2,
  t.tipo_inmueble,
  t.habitaciones,
  t.banios,
  t.planta,
  t.trastero,
  t.garaje,
  t.piscina,
  t.ac,
  t.ascensor,
  t.terraza,
  t.jardin,
  t.estado_conservacion,
  t.cerramientos,
  t.embedding <-> r.embedding AS embedding_similarity,
  t.embedding_habitaciones_banios_planta <-> r.embedding_habitaciones_banios_planta AS embedding_similarity_hab_banios_planta,
  
  ST_Distance(t.ubicacion::geography, r.ref_ubicacion::geography) AS distancia_al_inmueble_m,

(
  -- 1. General property embedding similarity (35%)
  0.20 * GREATEST(1 - LEAST(t.embedding <-> r.embedding, 1), 0) +
  
  -- 2. Size comparison using log-normalized ratio (35%)
  0.05 * EXP(-ABS(LN(GREATEST(t.m2::decimal, 0.1)/GREATEST(r.ref_m2::decimal, 0.1)))) +
  
  -- 3. Room/bathroom/floor configuration similarity (15%)
  0.30 * GREATEST(1 - LEAST(
    t.embedding_habitaciones_banios_planta <-> r.embedding_habitaciones_banios_planta, 
    1
  ), 0) +
  
  -- 4. Location proximity with exponential decay (10%)
  0.40 * EXP(-ST_Distance(t.ubicacion::geography, r.ref_ubicacion::geography)/50) +
  
  -- 5. Elevator match bonus (5%)
  0.05 * CASE WHEN t.ascensor = r.ref_ascensor THEN 1 ELSE 0 END
) as combined_score,


   (t.m2::decimal/ref_m2::decimal) as diferencia_porciento_m2,
  'FASE 1' as fase
FROM reference r
CROSS JOIN  testigos /* LATERAL app_valoracion_getTestigosByHabitacionesAndBanios
(
  r.ref_habitaciones, 
  r.ref_banios, 
  1
) */t
WHERE
ST_DWithin(t.ubicacion::geography, r.ref_ubicacion::geography, 1000) -- Radio de 1 km (en metros)
and   
(
        (
         (t.m2::decimal / r.ref_m2::decimal) BETWEEN 0.80 AND 1.20
            AND t.tipo_inmueble = 'Piso'
            AND t.planta BETWEEN r.ref_planta - 1 AND r.ref_planta + 1
            AND ascensor = r.ref_ascensor
        )
       or
               (
           (t.m2::decimal / r.ref_m2::decimal) BETWEEN 0.80 AND 1.20
            and t.planta = 0
            
            AND t.tipo_inmueble IN ('Piso')
        ) or
        (
           (t.m2::decimal / r.ref_m2::decimal) BETWEEN 0.80 AND 1.20
            
            and t.ascensor = true
            AND t.tipo_inmueble IN ('Piso', 'Atico', 'Duplex', 'Estudio')
        )
    
) 
and ( t.embedding_habitaciones_banios_planta <-> r.embedding_habitaciones_banios_planta < 0.55)  

/*
union 

SELECT 
  t.id, 
  t.precio, 
  t.m2,
  t.tipo_inmueble,
  t.habitaciones,
  t.banios,
  t.planta,
  t.trastero,
  t.garaje,
  t.piscina,
  t.ac,
  t.ascensor,
  t.terraza,
  t.jardin,
  t.estado_conservacion,
  t.cerramientos,
  t.embedding <-> r.embedding AS embedding_similarity,
    t.embedding_habitaciones_banios_planta <-> r.embedding_habitaciones_banios_planta AS embedding_similarity_hab_banios_planta,
  ST_Distance(t.ubicacion::geography, r.ref_ubicacion::geography) AS distancia_al_inmueble_m,
  (
  -- 1. General property embedding similarity (35%)
  0.35 * GREATEST(1 - LEAST(t.embedding <-> r.embedding, 1), 0) +
  
  -- 2. Size comparison using log-normalized ratio (35%)
  0.35 * EXP(-ABS(LN(GREATEST(t.m2::decimal, 0.1)/GREATEST(r.ref_m2::decimal, 0.1)))) +
  
  -- 3. Room/bathroom/floor configuration similarity (15%)
  0.15 * GREATEST(1 - LEAST(
    t.embedding_habitaciones_banios_planta <-> r.embedding_habitaciones_banios_planta, 
    1
  ), 0) +
  
  -- 4. Location proximity with exponential decay (10%)
  0.10 * EXP(-ST_Distance(t.ubicacion::geography, r.ref_ubicacion::geography)/2000) +
  
  -- 5. Elevator match bonus (5%)
  0.05 * CASE WHEN t.ascensor = r.ref_ascensor THEN 1 ELSE 0 END
) as combined_score,
/*  (t.embedding <-> r.embedding) * 0.5 + 
 * 
  (ST_Distance(t.ubicacion::geography, r.ref_ubicacion::geography) / 1000) * 0.5 AS combined_score,
  */
 (t.m2::decimal/ref_m2::decimal) as diferencia_porciento_m2,
  'FASE 2' as fase
FROM reference r
CROSS JOIN LATERAL app_valoracion_getTestigosByHabitacionesAndBanios(
  r.ref_habitaciones, 
  r.ref_banios, 
  2
) t
WHERE
ST_DWithin(t.ubicacion::geography, r.ref_ubicacion::geography, 2000) -- Radio de 1 km (en metros)
and   
(
        (
            (t.m2::decimal / r.ref_m2::decimal) BETWEEN 0.80 AND 1.20
            AND t.tipo_inmueble = 'Piso'
            AND t.planta BETWEEN r.ref_planta - 1 AND r.ref_planta + 1
            AND ascensor = t.ascensor
        )
        OR
        -- Scenario 2: Specific types with ascensor required
        (
           (t.m2::decimal / r.ref_m2::decimal) BETWEEN 0.80 AND 1.20
            and t.ascensor = true
            AND t.tipo_inmueble IN ('Piso', 'Atico', 'Duplex', 'Estudio')
        )
    
)
*/

ORDER BY  distancia_al_inmueble_m asc; --combined_score desc,
